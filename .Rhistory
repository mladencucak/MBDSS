theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "none")
ggplot(wth, aes(datetime , cusum))+
geom_line()
# ggplot(wth, aes(datetime , prob_low))+
#   geom_line()
#
##########################################################
# The model function
##########################################################
# load the infection model
load( here("scr/model/inf_model.RData"))
# cumulative probability of sporulation parameters
load(here("scr/model/cu_probs.RData"))
spor.model = tb
inf.model = mod
# The model is wrapped into a function for easier apllication to lager data set
MBRisk <- function(wth,
spor.model,
inf.model ){
# Set min thresholds to enable model runs
rh_thresh <- 90
temp_thresh <- 6
rain_thresh <- .2
# Extract variables as vectors for speed
wth[["rain"]] -> rain
if ("rhum" %in% names(wth))  wth[["rhum"]] -> rh
if ("rh" %in% names(wth))  wth[["rh"]] -> rh
wth[["temp"]] -> temp
# This function to infill missing values to let the model run
infill_gap <- 12
if (sum(is.na(with(wth, rain, temp, rhum))) > 0) {
temp <-
round(zoo::na.spline(temp, na.rm = FALSE, maxgap = infill_gap), 1)
rh <-
round(zoo::na.spline(rh, na.rm = FALSE, maxgap = infill_gap), 0)
rh  <- sapply(rh, function(x) ifelse(x > 100, x <- 100, x))
# Rain is infilled based on min rh wethens threshold to let the model run
rain <- ifelse(rh>=rh_thresh, .2 )
}
if (sum(is.na(with(wth, rain, temp, rhum))) > 0) {
stop(print("The sum of NAs is more than 7! Check your weather data."))
}
# Probabilities for sporulation onset
# Works as a lookup table, estiamting probability of sporulation onset based on
cu <- ifelse(wth$temp > 0 & wth$temp < 7.2, 1, 0)
wth$cusum <- cumsum(cu)
wth$prob_high <- pnorm(cusum,
spor.model[spor.model$mng == "high", "means"] %>% pull,
spor.model[spor.model$mng == "high", "sdev"] %>% pull)
wth$prob_low <- pnorm(cusum,
spor.model[spor.model$mng == "low", "means"] %>% pull,
spor.model[spor.model$mng == "low", "sdev"] %>% pull)
start.prob <- .01
wth$start_high <-wth[which.min(abs(wth$cu_high - start.prob)), "datetime" ]%>% pull()
wth$start_low <-wth[which.min(abs(wth$cu_low - start.prob)),"datetime" ]%>% pull()
# conditions for infection
wet_dur <- ifelse(rh >= 90 | rain> rain_thresh, 1,0)
criteria <- as.numeric(temp >= temp_thresh & wet_dur == 1)
# criteria  <- c(0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0)
#The accumulation breaks if the conditions aren't met for more than infstop hours
infstop <- 2 + 1
criteria <- c(criteria, rep(0, infstop))
for (k in c(1:c(length(criteria)-infstop))){
# k = 2
if(criteria[k] == 1& criteria[k + infstop] == 1 ) criteria[k : c(k + infstop)] <- 1
}
criteria <-  criteria[1:c(length(criteria)-infstop)]
#
# cumulative sum of hours that meet the criteria for sporulation with restart at zero
(criteria_sum <-
stats::ave(criteria, cumsum(criteria == 0), FUN = cumsum)
)
dff <- data.frame(temp = temp, wet_dur=criteria_sum)
wth$inf <- plogis(predict(inf.model, newdata=dff))
# dff$inf <-ifelse(dff$wet_dur == 0,0, dff$inf)
return(wth)
}
system.time(MBRisk(wth, tb, mod))
############################################################
# Model validation
############################################################
# Add traficlight system using the risk estimates proposed by the author of paper
# Turn the code into a function and plot all of these to get an idea if it is ok
# Calculate the average date of the initial predicted sporulation onset
# Plot this on the map?
# Observed forecasted data
# Temps above 65F during infection period times
for (i in 1:length(wthls)) {
x <- wthls[[i]]
# (x <- wthls[[12]])
wthls[[i]] <-  MBRisk(wth,tb, mod)
print(paste(i,",", round(i/length(wthls),3)))
done <- i
}
beepr::beep()
hightemps <-
wthls %>%
bind_rows() %>%
separate(envir, into = c("stna", "season")) %>%
mutate(mn = month(date)) %>%
mutate(high_temp = ifelse(temp>18.3333, 1,0)) %>%
group_by(mn) %>%
summarise(temp = sum(high_temp))
mutate(hightemps, mn = factor(mn, levels =c(11, 12, 1:5)))
# load the model
load( here("scr/model/inf_model.RData"))
cl <- makeCluster(detectCores())
#Download packages that are not already present in the library
if (length(new.packages))
install.packages(new.packages)
if (length(new.packages))
install.packages(new.packages, repos = c(CRAN="https://cran.r-project.org/"))
packages_load <-
lapply(list.of.packages, require, character.only = TRUE)
#Print warning if there is a problem with installing/loading some of packages
if (any(as.numeric(packages_load) == 0)) {
warning(paste("Package/s", paste(list.of.packages[packages_load != TRUE]), "not loaded!"))
} else {
print("All packages were successfully loaded.")
}
conflict_prefer("here", "here")
conflict_prefer("map", "purrr")
conflict_prefer("select", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("leap_year", "lubridate")
conflict_prefer("year", "lubridate")
conflict_prefer("filter", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("month", "lubridate")
rm(packages_load, list.of.packages, new.packages)
load(here("dat", "wth", "weather_hourly.RData"))
# wthh$yr <- year(wthh$datetime)
# wthh$mon <- lubridate::month(wthh$datetime)
wthh$date <- as.Date(wthh$datetime)
list.of.packages <-
c(
"dplyr",
"ggplot2",
"readr",
"lubridate",
"data.table",
"GGally",
"here",
"reshape2",
"stringr",
"conflicted",
"lubridate",
"naniar",
"tibble",
"tidyr",
"pbapply",
"parallel",
"zoo"
)
new.packages <-
list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# save(wthls, file = here("out/val/wthls.RData"))
load(file = here("out/val/wthls.RData"))
list.of.packages <-
c(
"dplyr",
"ggplot2",
"readr",
"lubridate",
"data.table",
"GGally",
"here",
"reshape2",
"stringr",
"conflicted",
"lubridate",
"naniar",
"tibble",
"tidyr",
"pbapply",
"parallel",
"zoo"
)
new.packages <-
list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
#Download packages that are not already present in the library
if (length(new.packages))
install.packages(new.packages)
if (length(new.packages))
install.packages(new.packages, repos = c(CRAN="https://cran.r-project.org/"))
packages_load <-
lapply(list.of.packages, require, character.only = TRUE)
#Print warning if there is a problem with installing/loading some of packages
if (any(as.numeric(packages_load) == 0)) {
warning(paste("Package/s", paste(list.of.packages[packages_load != TRUE]), "not loaded!"))
} else {
print("All packages were successfully loaded.")
}
conflict_prefer("here", "here")
conflict_prefer("map", "purrr")
conflict_prefer("select", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("leap_year", "lubridate")
conflict_prefer("year", "lubridate")
conflict_prefer("filter", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("month", "lubridate")
rm(packages_load, list.of.packages, new.packages)
for (i in 1:length(wthls)) {
x <- wthls[[i]]
# (x <- wthls[[12]])
wthls[[i]] <-  MBRisk(x,tb, mod)
print(paste(i,",", round(i/length(wthls),3)))
done <- i
}
# save(wthls, file = here("out/val/wthls.RData"))
load(file = here("out/val/wthls.RData"))
dat <-
wthls %>%
bind_rows() %>%
mutate(date = as.Date(datetime)) %>%
group_by(envir, date) %>%
summarise(
prob_low = mean(prob_low),
prob_high = mean(prob_high),
inf = sum(inf),
start_low = unique(start_low),
start_high = unique(start_high)
) %>%
ungroup() %>%
separate(envir, into = c("stna", "season"), remove = F) %>%
mutate(season = as.numeric(season)) %>%
mutate(doy = yday(date))
#Reproducble from this point
datls <-
dat %>%
filter(doy <200) %>%
split(f= .$envir) %>%
lapply(., function(dff){
df <-  dff[which.min(abs(dff$prob_low - .01)),"doy"]
df$regime <- "low"
df <-
bind_rows(df,
data.frame(doy = dff[which.min(abs(dff$prob_high - .01)),"doy"] %>% pull(),
regime = "high"))
df$envir <- dff$envir[1]
return(df)
}) %>% bind_rows()
#Infection model evaluation
datls %>%
group_by(regime) %>%
filter(doy>85) %>% head(20) %>%
mutate(date =
lubridate::as_date(doy, origin = "2016-01-01"),
date = format(date, "%m-%d"))
#
lsrisk <- list()
for (i in seq(wthls)) {
# i = 2
dff <- wthls[[i]]
first <- which.min(abs(dff$prob_low - .01))
duration <- 28*24
last <- first + duration
dfrisk <-
dff[first : last,] %>%
mutate(date = as_date(datetime)) %>%
group_by(date) %>%
summarise(inf = max(inf)) %>%
mutate(risk = ifelse(inf < .2, 0,
ifelse(inf >=.2& inf<.35, 1,
ifelse(inf >= .35, 2, NA)))) %>%
group_by(risk) %>%
summarise(count = n())
dfrisk$regime <- "low"
first <- which.min(abs(dff$prob_high - .01))
duration <- 28*24
last <- first + duration
dfriskhigh <-
dff[first : last,] %>%
mutate(date = as_date(datetime)) %>%
group_by(date) %>%
summarise(inf = max(inf)) %>%
mutate(risk = ifelse(inf < .2, 0,
ifelse(inf >=.2& inf<.35, 1,
ifelse(inf >= .35, 2, NA)))) %>%
group_by(risk) %>%
summarise(count = n())
dfriskhigh$regime <- "high"
lsrisk[[i]] <-  rbind(dfrisk, dfriskhigh)
}
pallet <- c("#99c140","#e7b416",  "#cc3232")
risk <-
lsrisk %>%
bind_rows() %>%
mutate(risk = factor(risk)) %>%
drop_na()
labs.d <-
risk %>%
group_by(regime, risk) %>%
summarise(`50%` = mean(count),
`25%` = quantile(count, .25),
`75%` = quantile(count, .75),
`5%` = quantile(count, .05),
`95%` = quantile(count, .95)
) %>%
ungroup() %>%
pivot_longer(cols = c(`50%` ,`25%`, `75%` , `5%`, `95%`)) %>%
mutate(count = round(value, 1)) %>%
select(-value) %>% scscc
labs.d <-
risk %>%
group_by(regime, risk) %>%
summarise(`50%` = mean(count),
`25%` = quantile(count, .25),
`75%` = quantile(count, .75),
`5%` = quantile(count, .05),
`95%` = quantile(count, .95)
) %>%
ungroup() %>%
pivot_longer(cols = c(`50%` ,`25%`, `75%` , `5%`, `95%`)) %>%
mutate(count = round(value, 1)) %>%
select(-value) %>%
mutate(date.m = paste0(count, "(", name, ")"))
risk %>%
ggplot(aes(risk, count))+
geom_boxplot(width = .3,color = "gray", notch = TRUE)+
geom_jitter(aes(color = risk),width =.1, size = .5)+
# coord_flip()+
xlab("Management")+
scale_color_manual("Risk",
values = pallet,
labels= c("No risk", "Medium", "High"))+
ggrepel::geom_text_repel(aes(label = date.m,
x =
ifelse(risk ==0, 1.5,
ifelse(risk == 1, 2.5,
ifelse(risk== 2,3.5, NA))),
y = count,
color = risk
),
data = labs.d,
size = 4,
max.overlaps = 20,
direction = "y"
# angle = 20
)+
scale_x_discrete(expand = c(0,.9))+
theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "bottom")+
facet_wrap(~regime)
ggsave(here("out/Infection_evaluation.png"),
width = 10, height = 7, dpi = 600)
shell.exec(here("out/Infection_evaluation.png"))
risk %>%
ggplot(aes(risk, count))+
geom_boxplot(width = .3,color = "gray", notch = TRUE)+
geom_jitter(aes(color = risk),width =.1, size = .5)+
# coord_flip()+
xlab("Management")+
scale_color_manual("Risk",
values = pallet,
labels= c("No risk", "Medium", "High"))+
ggrepel::geom_text_repel(aes(label = date.m,
x =
ifelse(risk ==0, 1.5,
ifelse(risk == 1, 2.5,
ifelse(risk== 2,3.5, NA))),
y = count,
color = risk
),
data = labs.d,
size = 4,
max.overlaps = 20,
direction = "y"
# angle = 20
)+
scale_x_discrete(expand = c(0,1.1))+
theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "bottom")+
facet_wrap(~regime)
ggsave(here("out/Infection_evaluation.png"),
width = 10, height = 7, dpi = 600)
shell.exec(here("out/Infection_evaluation.png"))
risk %>%
ggplot(aes(risk, count))+
geom_boxplot(width = .3,color = "gray", notch = TRUE)+
geom_jitter(aes(color = risk),width =.1, size = .5)+
# coord_flip()+
xlab("Management")+
scale_color_manual("Risk",
values = pallet,
labels= c("No risk", "Medium", "High"))+
ggrepel::geom_text_repel(aes(label = date.m,
x =
ifelse(risk ==0, 1.5,
ifelse(risk == 1, 2.5,
ifelse(risk== 2,3.5, NA))),
y = count,
color = risk
),
data = labs.d,
size = 4,
max.overlaps = 20,
direction = "y"
# angle = 20
)+
scale_x_discrete(expand = c(0,1.1))+
theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "bottom")+
facet_wrap(~regime)
ggsave(here("out/Infection_evaluation.png"),
width = 10, height = 7, dpi = 600)
shell.exec(here("out/Infection_evaluation.png"))
risk %>%
ggplot(aes(risk, count))+
geom_boxplot(width = .3,color = "gray", notch = TRUE)+
geom_jitter(aes(color = risk),width =.1, size = .5)+
# coord_flip()+
xlab("Management")+
scale_color_manual("Risk",
values = pallet,
labels= c("No risk", "Medium", "High"))+
ggrepel::geom_text_repel(aes(label = date.m,
x =
ifelse(risk ==0, 1.5,
ifelse(risk == 1, 2.5,
ifelse(risk== 2,3.5, NA))),
y = count,
color = risk
),
data = labs.d,
size = 4,
max.overlaps = 20,
direction = "y"
# angle = 20
)+
scale_x_discrete(expand = c(0,1.1))+
theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "bottom",
axis.text.x = element_blank())+
facet_wrap(~regime)
risk %>%
ggplot(aes(risk, count))+
geom_boxplot(width = .3,color = "gray", notch = TRUE)+
geom_jitter(aes(color = risk),width =.1, size = .5)+
# coord_flip()+
xlab("Management")+
scale_color_manual("Risk",
values = pallet,
labels= c("No risk", "Medium", "High"))+
ggrepel::geom_text_repel(aes(label = date.m,
x =
ifelse(risk ==0, 1.5,
ifelse(risk == 1, 2.5,
ifelse(risk== 2,3.5, NA))),
y = count,
color = risk
),
data = labs.d,
size = 4,
max.overlaps = 20,
direction = "y"
# angle = 20
)+
ylab("Number of days per risk category")+
scale_x_discrete(expand = c(0,1.1))+
theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "bottom",
axis.text.x = element_blank()
)+
facet_wrap(~regime)
ggsave(here("out/Infection_evaluation.png"),
width = 10, height = 7, dpi = 600)
shell.exec(here("out/Infection_evaluation.png"))
risk %>%
ggplot(aes(risk, count))+
geom_boxplot(width = .3,color = "gray", notch = TRUE)+
geom_jitter(aes(color = risk),width =.1, size = .5)+
# coord_flip()+
xlab("Management")+
scale_color_manual("Risk",
values = pallet,
labels= c("No risk", "Medium", "High"))+
ggrepel::geom_text_repel(aes(label = date.m,
x =
ifelse(risk ==0, 1.5,
ifelse(risk == 1, 2.5,
ifelse(risk== 2,3.5, NA))),
y = count,
color = risk
),
data = labs.d,
size = 4,
max.overlaps = 20,
direction = "y"
# angle = 20
)+
ylab("Number of days per risk category")+
scale_x_discrete(expand = c(0,1.1))+
theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "bottom",
axis.text.x = element_blank(),
legend.text=element_text(size=13)
)+
facet_wrap(~regime)
ggsave(here("out/Infection_evaluation.png"),
width = 10, height = 7, dpi = 600)
shell.exec(here("out/Infection_evaluation.png"))
length(wthls)
