y = ifelse(spore_start_mng == "Low", 10,30) ),
check_overlap = TRUE,angle = 90, size = 4.5)+
ylab("Infection Risk(%)")+
theme_bw()+
theme(axis.title.x = element_blank(),
legend.position = "none",
text = element_text(size = text_size))
)
wth
##########################################################
# The model function
##########################################################
# load the infection model
load( here("scr/model/inf_model.RData"))
# cumulative probability of sporulation parameters
load(here("scr/model/cu_probs.RData"))
spor.model = tb
inf.model = mod
# The model is wrapped into a function for easier apllication to lager data set
MBRisk <- function(wth,
spor.model,
inf.model ){
# wth <- wthls[[1]]
# Set min thresholds to enable model runs
rh_thresh <- 90
temp_thresh <- 6
rain_thresh <- .2
# Extract variables as vectors for speed
wth[["rain"]] -> rain
if ("rhum" %in% names(wth))  wth[["rhum"]] -> rh
if ("rh" %in% names(wth))  wth[["rh"]] -> rh
wth[["temp"]] -> temp
# This function to infill missing values to let the model run
infill_gap <- 12
if (sum(is.na(with(wth, rain, temp, rhum))) > 0) {
temp <-
round(zoo::na.spline(temp, na.rm = FALSE, maxgap = infill_gap), 1)
rh <-
round(zoo::na.spline(rh, na.rm = FALSE, maxgap = infill_gap), 0)
rh  <- sapply(rh, function(x) ifelse(x > 100, x <- 100, x))
# Rain is infilled based on min rh wethens threshold to let the model run
rain <- ifelse(rh>=rh_thresh, .2 )
}
if (sum(is.na(with(wth, rain, temp, rhum))) > 0) {
stop(print("The sum of NAs is more than 7! Check your weather data."))
}
# Probabilities for sporulation onset
# Works as a lookup table, estiamting probability of sporulation onset based on
cu <- ifelse(wth$temp > 0 & wth$temp < 7.2, 1, 0)
wth$cusum <- cumsum(cu)
wth$prob_high <- pnorm(wth$cusum,
spor.model[spor.model$mng == "high", "means"] %>% pull,
spor.model[spor.model$mng == "high", "sdev"] %>% pull)
wth$prob_low <- pnorm(wth$cusum,
spor.model[spor.model$mng == "low", "means"] %>% pull,
spor.model[spor.model$mng == "low", "sdev"] %>% pull)
start.prob <- .01
wth$start_high <-wth[which.min(abs(wth$prob_high - start.prob)), "datetime" ]%>% pull()
wth$start_low <-wth[which.min(abs(wth$prob_low - start.prob)),"datetime" ]%>% pull()
# conditions for infection
wet_dur <- ifelse(rh >= 90 | rain> rain_thresh, 1,0)
criteria <- as.numeric(temp >= temp_thresh & wet_dur == 1)
# criteria  <- c(0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0)
#The accumulation breaks if the conditions aren't met for more than infstop hours
infstop <- 2 + 1
criteria <- c(criteria, rep(0, infstop))
for (k in c(1:c(length(criteria)-infstop))){
# k = 2
if(criteria[k] == 1& criteria[k + infstop] == 1 ) criteria[k : c(k + infstop)] <- 1
}
criteria <-  criteria[1:c(length(criteria)-infstop)]
#
# cumulative sum of hours that meet the criteria for sporulation with restart at zero
(criteria_sum <-
stats::ave(criteria, cumsum(criteria == 0), FUN = cumsum)
)
dff <- data.frame(temp = temp, wet_dur=criteria_sum)
wth$inf <- plogis(predict(inf.model, newdata=dff))
# dff$inf <-ifelse(dff$wet_dur == 0,0, dff$inf)
return(wth)
}
system.time(MBRisk(wth, tb, mod))
for (i in 1:length(wthls)) {
x <- wthls[[i]]
# (x <- wthls[[12]])
wthls[[i]] <-  MBRisk(x,tb, mod)
print(paste(i,",", round(i/length(wthls),3)))
done <- i
}
beepr::beep()
# check for temperatures higher than 18.33 C
(hightemps <-
wthls %>%
bind_rows() %>%
separate(envir, into = c("stna", "season")) %>%
mutate(mn = month(date)) %>%
mutate(high_temp = ifelse(temp>18.3333, 1,0)) %>%
group_by(mn) %>%
summarise(temp = sum(high_temp)))
# save(wthls, file = here("out/val/wthls.RData"))
load(file = here("out/val/wthls.RData"))
dat <-
wthls %>%
bind_rows() %>%
mutate(date = as.Date(datetime)) %>%
group_by(envir, date) %>%
summarise(
prob_low = mean(prob_low),
prob_high = mean(prob_high),
inf = sum(inf),
start_low = unique(start_low),
start_high = unique(start_high)
) %>%
ungroup() %>%
separate(envir, into = c("stna", "season"), remove = F) %>%
mutate(season = as.numeric(season)) %>%
mutate(doy = yday(date))
#Reproducble from this point
datls <-
dat %>%
filter(doy <200) %>%
split(f= .$envir) %>%
lapply(., function(dff){
df <-  dff[which.min(abs(dff$prob_low - .01)),"doy"]
df$regime <- "low"
df <-
bind_rows(df,
data.frame(doy = dff[which.min(abs(dff$prob_high - .01)),"doy"] %>% pull(),
regime = "high"))
df$envir <- dff$envir[1]
return(df)
}) %>% bind_rows()
labs.d <-
datls %>%
group_by(regime) %>%
summarise(`50%` = mean(doy),
`25%` = quantile(doy, .25),
`75%` = quantile(doy, .75),
`5%` = quantile(doy, .05),
`95%` = quantile(doy, .95)
) %>%
pivot_longer(cols = !regime) %>%
mutate(date =
lubridate::as_date(value, origin = "2016-01-01"),
date.m = format(date, "%d-%m")) %>%
mutate( name = factor(name)) %>%
mutate(date.m = paste0(date.m, "(", name, ")"))
levels(labs.d$name) <- levels(labs.d$name)[c(2,1,3,4,5)]
datls %>%
mutate(date =
lubridate::as_date(doy, origin = "2016-01-01")) %>%
left_join(., labs.d) %>%
ggplot(aes(regime, date))+
geom_boxplot(width = .5,color = "gray", notch = TRUE)+
geom_jitter(width =.2, size = .5)+
geom_text(aes(label = date.m, x =ifelse(regime=="high",1.5,2.5),
y = date
# color = name
),
data = labs.d,
size = 2.5,
angle = 20
)+
coord_flip()+
xlab("Management")+
theme_bw()+
theme(axis.title.x = element_blank())
ggsave(here("out/Spor_start_Dur_Intensity.png"),
width = 6.5, height = 3.2, dpi = 600)
list.of.packages <-
c(
"dplyr",
"ggplot2",
"readr",
"lubridate",
"data.table",
"GGally",
"here",
"reshape2",
"stringr",
"conflicted",
"lubridate",
"naniar",
"tibble",
"tidyr",
"forcats",
"ggpubr",
"survival"
)
new.packages <-
list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
#Download packages that are not already present in the library
if (length(new.packages))
install.packages(new.packages)
if (length(new.packages))
install.packages(new.packages, repos = c(CRAN="https://cran.r-project.org/"))
packages_load <-
lapply(list.of.packages, require, character.only = TRUE)
#Print warning if there is a problem with installing/loading some of packages
if (any(as.numeric(packages_load) == 0)) {
warning(paste("Package/s", paste(list.of.packages[packages_load != TRUE]), "not loaded!"))
} else {
print("All packages were successfully loaded.")
}
conflict_prefer("here", "here")
conflict_prefer("map", "purrr")
conflict_prefer("select", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("leap_year", "lubridate")
conflict_prefer("year", "lubridate")
conflict_prefer("filter", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("month", "lubridate")
rm(packages_load, list.of.packages, new.packages)
linesize <- .45 #size of the line for variables
top <- 30
apodot <- 3
apodot_pos <- -6
ReLab <- function(flab ,fvar ){
paste(flab,
substring(fvar, 6, 10))
}
# Add
lab_date_g <- 3
lab_date <- 3.7
# Extract additional data for pathogen development
summary <-
dis_long %>%
group_by(id) %>%
summarise(
first_out = min(date),
last_out = max(date)
)
summary <-
dis_long %>%
filter(stage %in% "germination") %>%
group_by(id) %>%
mutate(counts_cum = cumsum(counts)) %>%
filter(counts_cum == max(counts_cum)) %>%
filter(row_number()==1) %>%
select(id, date) %>%
rename(germ_end = date) %>%
left_join(summary, ., by = "id")
linesize <- .45 #size of the line for variables
top <- 30
apodot <- 3
apodot_pos <- -6
ReLab <- function(flab ,fvar ){
paste(flab,
substring(fvar, 6, 10))
}
# Add
lab_date_g <- 3
lab_date <- 3.7
# Extract additional data for pathogen development
summary <-
dis_long %>%
group_by(id) %>%
summarise(
first_out = min(date),
last_out = max(date)
)
####################################################
# plot months around periods
#####################################################
#Bio data: dis_long
load(file = here::here("dat", "raw", "final", "dis_long.RData"))
linesize <- .45 #size of the line for variables
top <- 30
apodot <- 3
apodot_pos <- -6
ReLab <- function(flab ,fvar ){
paste(flab,
substring(fvar, 6, 10))
}
# Add
lab_date_g <- 3
lab_date <- 3.7
# Extract additional data for pathogen development
summary <-
dis_long %>%
group_by(id) %>%
summarise(
first_out = min(date),
last_out = max(date)
)
summary <-
dis_long %>%
filter(stage %in% "germination") %>%
group_by(id) %>%
mutate(counts_cum = cumsum(counts)) %>%
filter(counts_cum == max(counts_cum)) %>%
filter(row_number()==1) %>%
select(id, date) %>%
rename(germ_end = date) %>%
left_join(summary, ., by = "id")
(pl <-
wthd_ls %>% bind_rows() %>%
separate(id, c("loc", "yr"), remove = FALSE) %>%
mutate(doy =yday(date)) %>%
mutate(across(sporulation,~ ifelse(dplyr::lag(.) == 0 & . == 0 & lead(.) == 0, NA, .))) %>%
mutate(sporulation = ifelse(date< spore_start, NA, sporulation)) %>%
mutate(rain = ifelse(rain == 0, NA, rain)) %>%
mutate(rain = ifelse(rain >top, top, rain)) %>%
mutate(mon = month(date),
yr = factor(year(date),
levels = seq(min(year(date)), max(year(date)))),
frosthr = as.numeric(frosthr),
frost = ifelse(frosthr >0, top-9, NA),
spore_start = ifelse(sporulated == "yes", spore_start, NA) %>% as_date(),
spore_end = ifelse(sporulated == "yes", spore_end, NA)%>% as_date()
) %>%
left_join(., summary, by = "id") %>%
distinct() %>%
dplyr::filter(mon < 5) %>%
ggplot() +
# Germination and sporulation areas
geom_rect(aes(xmin = germ_start, xmax = germ_end, ymin = -Inf, ymax = Inf),
fill=gray.colors(12)[12], alpha = 0.9)+
geom_rect(aes(xmin = spore_start, xmax = spore_end, ymin = -Inf, ymax = Inf),
fill=gray.colors(12)[10], alpha = 0.9)+
geom_vline(aes(xintercept = germ_start), color = "black", size  = .2)+
geom_vline(aes(xintercept = spore_start), color = "black", size  = .2)+
geom_vline(aes(xintercept = spore_end), color = "black", size  = .2)+
geom_vline(aes(xintercept = last_out), color = "black", size  = .4, linetype = "dotted")+
# Boost the zero line
geom_hline(aes(yintercept = 0), color =gray.colors(12)[4] )+
# Environmental variables
geom_line(aes( x = date, y = temp,colour = "Mean daily temp. (ËšC)"),
size = linesize) +
geom_line(aes(x = date, y = wmintemp_10,colour = "10-day rolling mean daily min. temp.(ËšC)(dot-dash)"),
size = linesize, linetype = "twodash") +
geom_col(aes(date,rain,fill = "Total daily precipitation (mm/day)"),
size = .9 ,inherit.aes = TRUE, width = 0.4) +
# Negative temperatures
geom_point(aes(date, frost, group = frosthr, size = frosthr), shape = 20)+
# Labels for germination and sporulation dates
geom_text(aes(germ_start - lab_date_g, apodot_pos, label = ReLab( "G",germ_start)), size = apodot)+
geom_text(aes(spore_start - lab_date, apodot_pos,
label = ReLab(  ifelse(spore_start == spore_end, "AS-E", "AS"),spore_start)),size = apodot)+
geom_text(aes(spore_end + lab_date, apodot_pos,
label = ifelse(spore_start == spore_end, NA, ReLab( "AE", spore_end))),size = apodot)+
geom_text(aes(germ_start+ 30, apodot_pos,
label = ifelse(is.na(spore_start),"No apothecia presence", NA)),size = apodot)+
# Sporulation percentages
geom_point(aes(date, ifelse(sporulation > top, top-6, sporulation) ,
group = sporulation, colour = "Sporulating apothecia"), shape =17, size = 2, alpha = .8) +
geom_text(aes(date-1, top-3,
label =ifelse(!is.na(sporulation), paste0(sporulation, "%"), NA),
colour = "Apothecia percentage"
),size = apodot)+
#Theme and colors
scale_colour_manual(
"Daily weather:",
values = c(
"Mean daily temp. (ËšC)" = "#ED2939",
"10-day rolling mean daily min. temp.(ËšC)(dot-dash)" = "darkred",
"Sporulating apothecia" = "darkgreen"
)
) +
scale_fill_manual(name= NA, values = c("Total daily precipitation (mm/day)" = "blue")
) +
scale_y_continuous( breaks = seq(-10,top,10), limits = c(-10,top),expand = c(0, 0))+
scale_x_date(date_labels = "%b", date_breaks = "1 month",expand = c(.03, .04))+
guides(fill=guide_legend(nrow=1,byrow=F,title.position = "top"),
color=guide_legend(nrow=2,byrow=F,title.position = "top"),
linetype=guide_legend(nrow=1,byrow=T,title.position = "top"))+
theme_bw()+
theme(
text = element_text(size=10.8),
# axis.text.x = element_blank(),
# axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
legend.position = "top",
strip.background =element_rect(colour = "black",size=0.75),
strip.placement = "outside",
legend.title = element_blank(),
panel.grid.minor =   element_blank(),
panel.grid.major =   element_line(colour = "lightgray",size=linesize),
plot.margin = margin(0, 0, 0, 0, "cm"),
panel.spacing.y=unit(0, "lines"),
legend.box.spacing = unit(0.1, 'cm'),
legend.margin = margin(0, 0, 0, 0, "cm"),
)+
facet_wrap(yr ~ loc, scales = "free", ncol = 1,strip.position="right")
)
load(file = here("dat/ana/wthd_ls.RData"))
linesize <- .45 #size of the line for variables
top <- 30
apodot <- 3
apodot_pos <- -6
ReLab <- function(flab ,fvar ){
paste(flab,
substring(fvar, 6, 10))
}
# Add
lab_date_g <- 3
lab_date <- 3.7
# Extract additional data for pathogen development
summary <-
dis_long %>%
group_by(id) %>%
summarise(
first_out = min(date),
last_out = max(date)
)
summary <-
dis_long %>%
filter(stage %in% "germination") %>%
group_by(id) %>%
mutate(counts_cum = cumsum(counts)) %>%
filter(counts_cum == max(counts_cum)) %>%
filter(row_number()==1) %>%
select(id, date) %>%
rename(germ_end = date) %>%
left_join(summary, ., by = "id")
(pl <-
wthd_ls %>% bind_rows() %>%
separate(id, c("loc", "yr"), remove = FALSE) %>%
mutate(doy =yday(date)) %>%
mutate(across(sporulation,~ ifelse(dplyr::lag(.) == 0 & . == 0 & lead(.) == 0, NA, .))) %>%
mutate(sporulation = ifelse(date< spore_start, NA, sporulation)) %>%
mutate(rain = ifelse(rain == 0, NA, rain)) %>%
mutate(rain = ifelse(rain >top, top, rain)) %>%
mutate(mon = month(date),
yr = factor(year(date),
levels = seq(min(year(date)), max(year(date)))),
frosthr = as.numeric(frosthr),
frost = ifelse(frosthr >0, top-9, NA),
spore_start = ifelse(sporulated == "yes", spore_start, NA) %>% as_date(),
spore_end = ifelse(sporulated == "yes", spore_end, NA)%>% as_date()
) %>%
left_join(., summary, by = "id") %>%
distinct() %>%
dplyr::filter(mon < 5) %>%
ggplot() +
# Germination and sporulation areas
geom_rect(aes(xmin = germ_start, xmax = germ_end, ymin = -Inf, ymax = Inf),
fill=gray.colors(12)[12], alpha = 0.9)+
geom_rect(aes(xmin = spore_start, xmax = spore_end, ymin = -Inf, ymax = Inf),
fill=gray.colors(12)[10], alpha = 0.9)+
geom_vline(aes(xintercept = germ_start), color = "black", size  = .2)+
geom_vline(aes(xintercept = spore_start), color = "black", size  = .2)+
geom_vline(aes(xintercept = spore_end), color = "black", size  = .2)+
geom_vline(aes(xintercept = last_out), color = "black", size  = .4, linetype = "dotted")+
# Boost the zero line
geom_hline(aes(yintercept = 0), color =gray.colors(12)[4] )+
# Environmental variables
geom_line(aes( x = date, y = temp,colour = "Mean daily temp. (ËšC)"),
size = linesize) +
geom_line(aes(x = date, y = wmintemp_10,colour = "10-day rolling mean daily min. temp.(ËšC)(dot-dash)"),
size = linesize, linetype = "twodash") +
geom_col(aes(date,rain,fill = "Total daily precipitation (mm/day)"),
size = .9 ,inherit.aes = TRUE, width = 0.4) +
# Negative temperatures
geom_point(aes(date, frost, group = frosthr, size = frosthr), shape = 20)+
# Labels for germination and sporulation dates
geom_text(aes(germ_start - lab_date_g, apodot_pos, label = ReLab( "G",germ_start)), size = apodot)+
geom_text(aes(spore_start - lab_date, apodot_pos,
label = ReLab(  ifelse(spore_start == spore_end, "AS-E", "AS"),spore_start)),size = apodot)+
geom_text(aes(spore_end + lab_date, apodot_pos,
label = ifelse(spore_start == spore_end, NA, ReLab( "AE", spore_end))),size = apodot)+
geom_text(aes(germ_start+ 30, apodot_pos,
label = ifelse(is.na(spore_start),"No apothecia presence", NA)),size = apodot)+
# Sporulation percentages
geom_point(aes(date, ifelse(sporulation > top, top-6, sporulation) ,
group = sporulation, colour = "Sporulating apothecia"), shape =17, size = 2, alpha = .8) +
geom_text(aes(date-1, top-3,
label =ifelse(!is.na(sporulation), paste0(sporulation, "%"), NA),
colour = "Apothecia percentage"
),size = apodot)+
#Theme and colors
scale_colour_manual(
"Daily weather:",
values = c(
"Mean daily temp. (ËšC)" = "#ED2939",
"10-day rolling mean daily min. temp.(ËšC)(dot-dash)" = "darkred",
"Sporulating apothecia" = "darkgreen"
)
) +
scale_fill_manual(name= NA, values = c("Total daily precipitation (mm/day)" = "blue")
) +
scale_y_continuous( breaks = seq(-10,top,10), limits = c(-10,top),expand = c(0, 0))+
scale_x_date(date_labels = "%b", date_breaks = "1 month",expand = c(.03, .04))+
guides(fill=guide_legend(nrow=1,byrow=F,title.position = "top"),
color=guide_legend(nrow=2,byrow=F,title.position = "top"),
linetype=guide_legend(nrow=1,byrow=T,title.position = "top"))+
theme_bw()+
theme(
text = element_text(size=10.8),
# axis.text.x = element_blank(),
# axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
legend.position = "top",
strip.background =element_rect(colour = "black",size=0.75),
strip.placement = "outside",
legend.title = element_blank(),
panel.grid.minor =   element_blank(),
panel.grid.major =   element_line(colour = "lightgray",size=linesize),
plot.margin = margin(0, 0, 0, 0, "cm"),
panel.spacing.y=unit(0, "lines"),
legend.box.spacing = unit(0.1, 'cm'),
legend.margin = margin(0, 0, 0, 0, "cm"),
)+
facet_wrap(yr ~ loc, scales = "free", ncol = 1,strip.position="right")
)
