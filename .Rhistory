annotation_north_arrow(
location = "br",
which_north = "true",
pad_x = unit(2.8, "in"),
pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering
) +
labs(x = "Longitude", y = "Latitude") +
annotation_scale(location = "bl",
# pad_x = 2,
width_hint = 0.4) +
theme(
panel.background = element_rect(fill = "lightblue"),
# strip.background = element_blank(),
# legend.position = c(.18, .91),
legend.box.background = element_rect(color = "black", size = .5),
legend.key = element_rect(colour = "transparent", fill = "white")
)
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type,
color = type),
size = 3.2)+
scale_color_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_fill_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_shape_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c(16, 17)
)+
theme(
text = element_text(size = 11, family = "TT Times New Roman"),
legend.position = c(.20, .89) #place legend inside the plotting area
)
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type,
color = type),
size = 3.2)+
scale_color_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_fill_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
# scale_shape_manual(
#   name = "Data:",
#   labels = c( "Biological sites","Weather stations"),
#   values = c(16, 17)
# )+
theme(
text = element_text(size = 11, family = "TT Times New Roman"),
legend.position = c(.20, .89) #place legend inside the plotting area
)
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type,
color = type),
size = 3.2)+
scale_color_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
# scale_fill_manual(
#   name = "Data:",
#   labels = c( "Biological sites","Weather stations"),
#   values = c("blue", "black")
# ) +
scale_shape_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c(16, 17)
)+
theme(
text = element_text(size = 11, family = "TT Times New Roman"),
legend.position = c(.20, .89) #place legend inside the plotting area
)
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type,
color = type),
size = 3.2)+
.
# scale_color_manual(
#   name = "Data:",
#   labels = c( "Biological sites","Weather stations"),
#   values = c("blue", "black")
# ) +
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type,
color = type),
size = 3.2)+
# scale_color_manual(
#   name = "Data:",
#   labels = c( "Biological sites","Weather stations"),
#   values = c("blue", "black")
# ) +
scale_fill_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_shape_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c(16, 17)
)+
theme(
text = element_text(size = 11, family = "TT Times New Roman"),
legend.position = c(.20, .89) #place legend inside the plotting area
)
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type,
color = type),
size = 3.2)+
scale_color_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_fill_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_shape_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c(16, 17)
)+
theme(
text = element_text(size = 11, family = "TT Times New Roman"),
legend.position = c(.20, .89) #place legend inside the plotting area
)
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type,
color = type),
size = 3.2)+
scale_color_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_fill_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_shape_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c(16, 19)
)+
theme(
text = element_text(size = 11, family = "TT Times New Roman"),
legend.position = c(.20, .89) #place legend inside the plotting area
)
baseplot+
geom_sf(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(
fill = type,
shape = type,
color = type
),
# color = "black",
# shape = 17,
size = 1.3) +
coord_sf(
xlim = c(-123.4, -121.9),
ylim = c(48.9759, 47.7),
expand = FALSE
) +
# scale_color_brewer(palette = "Set1")+
# scale_fill_brewer(palette = "Set1")+
geom_text_repel(data = df_loc_sf[df_loc_sf$name != "corvallis", ],
aes(x = lon, y = lat, label = name,  group = type ),
size = 3.2)+
scale_color_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_fill_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c("blue", "black")
) +
scale_shape_manual(
name = "Data:",
labels = c( "Biological sites","Weather stations"),
values = c(16, 17)
)+
theme(
text = element_text(size = 11, family = "TT Times New Roman"),
legend.position = c(.20, .89) #place legend inside the plotting area
)
ggsave(
file = here::here("out" , "map_wth.png"),
width = 12,
height = 16,
units = "cm",
dpi = 400
)
shell.exec(here::here("out" , "map_wth.png"))
here("dat", "wth", "raw2021")
###################################################
#Libraries
#####################################################
list.of.packages <-
c(
"dplyr",
"ggplot2",
"readr",
"lubridate",
"data.table",
"GGally",
"here",
"reshape2",
"stringr",
"conflicted",
"lubridate",
"naniar",
"tibble",
"tidyr"
)
new.packages <-
list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
#Download packages that are not already present in the library
if (length(new.packages))
install.packages(new.packages)
if (length(new.packages))
install.packages(new.packages, repos = c(CRAN="https://cran.r-project.org/"))
packages_load <-
lapply(list.of.packages, require, character.only = TRUE)
#Print warning if there is a problem with installing/loading some of packages
if (any(as.numeric(packages_load) == 0)) {
warning(paste("Package/s", paste(list.of.packages[packages_load != TRUE]), "not loaded!"))
} else {
print("All packages were successfully loaded.")
}
conflict_prefer("here", "here")
conflict_prefer("map", "purrr")
conflict_prefer("select", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("leap_year", "lubridate")
conflict_prefer("year", "lubridate")
conflict_prefer("filter", "dplyr")
conflict_prefer("yday", "lubridate")
conflict_prefer("month", "lubridate")
rm(packages_load, list.of.packages, new.packages)
# Find nearest stations ---------------------------------------------------
(df_loc <-
read.csv(here::here("dat", "disease_loc.csv"), skip = 17) %>%
dplyr::select(-starts_with("X")))
(mtdt <-
read_csv( file = here("dat", "wth", "wth_loc_agwet.csv"))
)
# Computes distance using Haversine formula.
# Returns the result in meters.
haversine <- function( lat1, lon1, lat2, lon2, radius = 6371 ) {
# Convert decimal degrees to radians
lon1 = lon1 * pi / 180
lon2 = lon2 * pi / 180
lat1 = lat1 * pi / 180
lat2 = lat2 * pi / 180
# Haversine formula
dlon = lon2 - lon1
dlat = lat2 - lat1
a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
c = 2 * atan2(sqrt(a), sqrt(1-a))
return( radius * c * 1000 )
}
#Add col with station name and col with distance to outbreaks
distances <- vector(mode = "numeric")
temp_st <- df_loc
for (i in seq_along(df_loc[["lat"]])) {
# i = 2
# y = 2
for (y in seq_along(mtdt[["lat"]])) {
distances[y]<-  round(haversine(df_loc[["lat"]][i],
df_loc[["lon"]][i],
mtdt[["lat"]][y],
mtdt[["lon"]][y] )/1000,2)
}
temp_st <- mtdt[order(distances),]
df_loc$closest_1st[i] <- temp_st$stna[1]
df_loc$dist_1st[i] <- distances[order(distances)][1]
df_loc$closest_2nd[i] <- temp_st$stna[2]
df_loc$dist_2nd[i]<- distances[order(distances)][2]
df_loc$closest_3rd [i] <- temp_st$stna[3]
df_loc$dist_3rd[i] <- distances[order(distances)][3]
df_loc$closest_4th [i] <- temp_st$stna[4]
df_loc$dist_4th[i] <- distances[order(distances)][4]
df_loc$closest_5th [i] <- temp_st$stna[5]
df_loc$dist_5th[i] <- distances[order(distances)][5]
rm(i,y)
}
df_loc$name <- as.character(df_loc$name)
write.csv(df_loc, here("dat", "dis_loc&station_disrances.csv"), row.names = F)
#####################################################
# Extract the data
#####################################################
#Bio data: dis_long
load(file = here::here("dat", "raw", "final", "dis_long.RData"))
(dat_sum <-
dis_long %>%
mutate(yr = year(date)) %>%
group_by(loc, yr) %>%
summarise() %>%
mutate(start = as.Date(paste(yr-1, "10", "01", sep = "-")),
end = as.Date(paste(yr, "04", "30", sep = "-")))
)
(dis_long <-
dis_long %>%
select(-c(type, active)) %>%
mutate(yr = year(date)) %>%
unite(id, c("loc", "yr")))
# For each outbreak, subset the data from nearest station and add to
# the new dataset
# Weather data
load(here("dat", "wth", "weather_hourly.RData"))
# wthh$yr <- year(wthh$datetime)
# wthh$mon <- lubridate::month(wthh$datetime)
wthh$date <- as.Date(wthh$datetime)
wthh %>%
group_by(stna) %>%
summarise(start = min(date),
end = max(date))
wth_ls <- list()#list list for hourly wth
wthd_ls <- list()#list daily wth
ch_ls<- list() #chill hour sums from different dates
dis_ls <-  list()
# i=7
#apothecia location and range of dates
(loc <- dat_sum[i , "loc"] %>% pull())
i=7
# i=7
#apothecia location and range of dates
(loc <- dat_sum[i , "loc"] %>% pull())
(dates <- seq.Date(pull( dat_sum[i , "start"]),
pull( dat_sum[i , "end"]),
by = "day"))
#vector of weather stations by distance
(stnas <-
df_loc[df_loc$county == loc,grep("closest", names(df_loc))] %>% unlist())
#Check if data from particular station is available within the given date range
avaialble <- vector()
for (y in seq(stnas)) {
st_open <- wthh[ wthh$date %in% dates & wthh$stna == stnas[y] , "open"][1,]%>% pull()
st_end <- wthh[ wthh$date %in% dates & wthh$stna == stnas[y] , "closed"][1,] %>% pull()
wthh[  wthh$stna == stnas[y] , "closed"][1,]
data_available <-
all(sapply(dates, function(x) x >= st_open && x <= st_end))
avaialble [y] <- ifelse(data_available , 1, 0)
}
avaialble
#select the closest station that has full data
if(loc == "Island"){
closest <- "Coupeville"
}else{
(closest <-  stnas[which(avaialble==1)[1]] %>% as.character())
}
wthf <-
wthh[wthh$stna == closest & wthh$date %in% dates,]
wthh[wthh$stna == closest ,]
#Distance of weather station used in the analysis
# Find col with the closest station that has all data
distance_col <- #some locations have the same name as the weather station
if(length(which(df_loc[df_loc$county == loc, ] %in% closest))>1){
which(df_loc[df_loc$county == loc, ] %in% closest)[2]
}else{
which(df_loc[df_loc$county == loc, ] %in% closest)
}
(wthf$dist <- df_loc[df_loc$county == loc,distance_col +1])
#Add id for each loc/year
wthf$id <-
dat_sum[i , c("loc", "yr") ] %>% paste(., collapse = "_")
wthf <-
wthf %>%
mutate(doy = yday(date))
#Mark which season
#different from year as data goes from October previous year
wthf$season <- dat_sum[i , "yr"] %>% pull()
dis_ls
